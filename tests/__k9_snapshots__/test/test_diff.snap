type string-alias = string

type private-type = list<float32>

type second-level = bool

enum colors {
  red,
  green,
  blue,
}

variant my-enum {
  unit-type,
  tuple-variant(tuple<string, s32>),
}

variant with-named-fields {
  /// Example variant with named fields
  example(with-named-fields-example),
  unit-type,
  a-tuple(string),
  /// Example of a big named field
  big-example(with-named-fields-big-example),
}
/// Example variant with named fields
record with-named-fields-example {
  /// Doc for inner string
  name: string
}
/// Example of a big named field
record with-named-fields-big-example {
  /// Info about field
  field: u32,
  b: bool,
  s: string,
  a: list<u32>,
  a-tuple: tuple<float64, list<tuple<u32,my-enum>>>
}

test-simple: func(array: list<u8>) -> string

type nft-contract-metadata = string

record init-args {
  owner-id: string,
  metadata: nft-contract-metadata
}

test-array: func(other: list<u8>, number: u8, othernum: s32) -> tuple<string, u64>

test-vec: func(other: list<u8>, number: u8, othernum: s32) -> tuple<string, u64>

test-option: func(other: list<u8>, number: u8, othernum: s32) -> option<tuple<string, u64>>

test-result: func(other: list<u8>, number: u8, othernum: s32) -> expected<tuple<string, u64>, string>

/// Here is a doc example to generate in wit file
record test-bis {
  coucou: string,
  btes: list<u8>
}

/// Documentation over struct
/// in multi-line
type test-tuple = tuple<u64, string>

record test-struct {
  /// Doc comment over inner field in struct
  inner: string
}

/// Documentation over enum
variant test-enum {
  /// Doc comment over UnitType variant in struct
  /// Two lines
  unit-type,
  number(u64),
  /// Doc comment over String variant in struct
  string-variant(string),
}

test-tuple: func(other: list<u8>, test-struct: test-struct, other-enum: test-enum) -> tuple<string, s64>

record has-hash-map {
  map: list<tuple<string,test-struct>>
}

use-string-alias: func(s: string-alias) -> string-alias

type float32-bit = float32

type float64-bit = float64

use-ext-dep: func() -> external-dep

/// This is an example wit interface
resource example-resource {
  /// Has doc string
  /// With two lines
  f: func(w: with-named-fields) -> test-enum
  ///@mutable
  fee: func(w: with-named-fields) -> test-enum
}
/// Example of an external dependency
type external-dep = string

/// Example Interface
resource sample-resource {
  /// Can handle static methods
  static faa: func()
  ///Can add special comments
  ///@payable
  foo: func() -> string
  /// Can indicate if mutable
  ///@mutable
  f: func() -> tuple<>
}

faa: func()
